import sys

# Function to find the minimum key vertex
def min_key(key, mst_set, n):
    min_val = sys.maxsize
    min_index = -1
    for v in range(n):
        if not mst_set[v] and key[v] < min_val:
            min_val = key[v]
            min_index = v
    return min_index

# Prim's Algorithm
def prim_mst(graph, n):
    key = [sys.maxsize] * n
    parent = [-1] * n
    mst_set = [False] * n

    key[0] = 0  # Start with the first vertex

    for _ in range(n):
        u = min_key(key, mst_set, n)
        mst_set[u] = True

        for v in range(n):
            if graph[u][v] and not mst_set[v] and graph[u][v] < key[v]:
                key[v] = graph[u][v]
                parent[v] = u

    # Print the edges of the MST
    print("Edge \tWeight")
    for i in range(1, n):
        print(f"{parent[i]} - {i}\t{graph[i][parent[i]]}")

# User Input for Graph
n = int(input("Enter the number of vertices: "))
print("Enter the adjacency matrix (0 for no edge):")
graph = []
for i in range(n):
    row = list(map(int, input().split()))
    graph.append(row)

# Run Prim's algorithm
prim_mst(graph, n)
